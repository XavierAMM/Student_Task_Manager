/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Views.Panels;

import Controllers.EntregaController;
import Controllers.MateriaEstudianteController;
import Controllers.TareaController;
import Controllers.UsuarioController;
import Models.Calificacion;
import Models.Entrega;
import Models.Persona;
import Models.Tarea;
import Views.FrameTareaDocente;
import Views.FrameTareaEstudiante;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Xavier
 */
public class PanelCalificacionTareas extends javax.swing.JPanel {

    private int modo; // 1. Estudiante 2. Docente    
    private List<Calificacion> calificaciones = new ArrayList<>();
    private TareaController _tc = TareaController.getInstance();
    private EntregaController _ec = EntregaController.getInstance();
    private MateriaEstudianteController _mec = MateriaEstudianteController.getInstance();
    private int idMateria;

    /**
     * Creates new form PanelCalificacionesMateria
     */
    public PanelCalificacionTareas(int idMateria) {
        initComponents();
        this.idMateria = idMateria;
        this.modo = UsuarioController.getMainUser().getPersona().getIdRol();
        cargarTabla();
    }

    public final void cargarTabla() {        
        // Paso 1: Buscar todas las tareas por idMateria
        calificaciones.clear();
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm");
        DefaultTableModel model = (DefaultTableModel) tablaMain.getModel();
        model.setRowCount(0);
        List<Tarea> tareas = _tc.getTareasByIdMateria(idMateria);        
        List<Entrega> entregas;        
        int promGen;
        // Paso 2: Obtener las calificaciones de cada una
        if (modo == 1) {
            // Estudiante: Buscar todas las entregas del estudiante por idMateria
            // Primero se colocan las tareas que ya han sido entregadas
            int tareaCuenta = 0;
            entregas = _ec.getEntregasByIdEstudianteIdMateria(idMateria, UsuarioController.getMainUser().getIdPersona());
            for(Tarea tar : tareas) {
                int nota = -1;
                for(Entrega ent : entregas){
                    if(tar.getIdTarea() == ent.getIdTarea()){
                        nota = ent.getCalificacion();                        
                    }
                }
                if(LocalDateTime.now().isAfter(tar.getFechaEntrega()) || nota >= 0) tareaCuenta++;
                Calificacion cal = new Calificacion(tar, nota);
                model.addRow(new Object[]{tar.getTitulo(), tar.getFechaEntrega().format(dtf), nota == -1 ? "---" : nota});
                calificaciones.add(cal);                
            }
            
            int calificacion = 0;
            for (Calificacion c : calificaciones){
                if(c.getCalificacion()>=0) calificacion += c.getCalificacion();
            }
            
            
            
            promGen = tareaCuenta > 0 ? calificacion / tareaCuenta : 0;          
                        
        }else{ // Si es docente
            int cant_estudiantes = _mec.getEstudiantesByIdMateria(idMateria).size();
            entregas = _ec.getEntregasByIdMateria(idMateria);            
            for(Tarea t : tareas){
                // Calcular el promedio de la tarea por cada estudiante
                int acum = 0;
                for(Entrega e : entregas){                    
                    if(e.getIdTarea() == t.getIdTarea() && e.getCalificacion() > 0)
                        acum += e.getCalificacion();
                }                
                int calificacion = cant_estudiantes > 0 ? acum / cant_estudiantes : 0;
                
                Calificacion c = new Calificacion(t, calificacion);
                model.addRow(new Object[]{c.getTarea().getTitulo(), c.getTarea().getFechaEntrega().format(dtf), c.getCalificacion()});
                calificaciones.add(c);
            }
            // Calcular promedio general
            int acum = 0;            
            for(Calificacion c : calificaciones)
                acum += c.getCalificacion();            
                
            promGen = !tareas.isEmpty() ? acum / tareas.size() : 0;            
        }
        
        lblPromedio.setText(""+promGen + "/100");
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMain = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblPromedio = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(498, 429));
        setMinimumSize(new java.awt.Dimension(498, 429));

        tablaMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Título", "Fecha Entrega", "Calificación"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaMain.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaMain.getTableHeader().setReorderingAllowed(false);
        tablaMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMainMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaMain);
        if (tablaMain.getColumnModel().getColumnCount() > 0) {
            tablaMain.getColumnModel().getColumn(2).setMinWidth(100);
            tablaMain.getColumnModel().getColumn(2).setPreferredWidth(100);
            tablaMain.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Promedio General:");

        lblPromedio.setText("jLabel2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(lblPromedio)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(lblPromedio))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel2.setText("Tip: Haga doble clic en una tarea para visualizarla.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1)
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addContainerGap(101, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tablaMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMainMouseClicked
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume(); // Evitar múltiples activaciones

            // Obtener la fila seleccionada
            int selectedRow = tablaMain.getSelectedRow();
            if (selectedRow != -1) {
                // Aquí puedes usar la lista de respaldo para obtener el objeto completo
                Calificacion calificacionSeleccionada = calificaciones.get(selectedRow);
                Tarea tareaSeleccionada = calificacionSeleccionada.getTarea();
                JFrame frame;
                if(modo==1) frame = new FrameTareaEstudiante(tareaSeleccionada);
                else frame = new FrameTareaDocente(tareaSeleccionada, this);
                frame.setVisible(true);                
            }
        }
    }//GEN-LAST:event_tablaMainMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPromedio;
    private javax.swing.JTable tablaMain;
    // End of variables declaration//GEN-END:variables

}
