/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Views.Panels;

import Controllers.EntregaController;
import Controllers.MateriaController;
import Controllers.MateriaEstudianteController;
import Controllers.TareaController;
import Controllers.UsuarioController;
import Models.Calificacion;
import Models.Entrega;
import Models.Materia;
import Models.Tarea;
import Views.FrameMain;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Xavier
 */
public class PanelCalificacionMaterias extends javax.swing.JPanel {
    
    private int modo; // 1. Estudiante 2. Docente;
    private MateriaEstudianteController _mec = MateriaEstudianteController.getInstance();
    private MateriaController _mc = MateriaController.getInstance();
    private EntregaController _ec = EntregaController.getInstance();
    private TareaController _tc = TareaController.getInstance();
    private List<Calificacion> calificaciones = new ArrayList<>();
    private FrameMain parent;

    /**
     * Creates new form PanelCalificacionMaterias
     */
    public PanelCalificacionMaterias(FrameMain parent) {
        initComponents();
        this.parent = parent;
        this.modo = UsuarioController.getMainUser().getPersona().getIdRol();
        cargarTabla();
    }
    
    private void cargarTabla(){
        calificaciones.clear();
        DefaultTableModel model = (DefaultTableModel) tablaMain.getModel();
        model.setRowCount(0);
        List<Materia> materias;
        int idPersona = UsuarioController.getMainUser().getIdUsuario();
        if(modo==1){            
            materias = _mec.getMateriasByIdEstudiante(idPersona);
            // Obtener las entregas de esa persona seg√∫n sus materias
            for(Materia mat : materias){              
                List<Entrega> entregas = _ec.getEntregasByIdEstudianteIdMateria(idPersona, mat.getIdMateria());
                List<Tarea> tareas = _tc.getTareasByIdMateria(mat.getIdMateria());
                int acum = 0;
                int tareaCuenta = 0;                                 
                for(Tarea tar : tareas){
                    for(Entrega ent : entregas){
                        if(tar.getIdTarea() == ent.getIdTarea())
                            acum += ent.getCalificacion() >= 0 ? ent.getCalificacion() : 0;
                        if(LocalDateTime.now().isAfter(tar.getFechaEntrega()) || ent.getCalificacion() >= 0) tareaCuenta++;
                    }                        
                }           
                    
                int promMateria = tareaCuenta > 0 ? acum / tareaCuenta : 0;
                Calificacion cal = new Calificacion(mat, promMateria);
                model.addRow(new Object[]{cal.getMateria().getNombre(), cal.getCalificacion()});
                calificaciones.add(cal);
            }
        }
        else{
            materias = _mc.getMateriasByIdDocente(idPersona);
            for(Materia mat : materias){
                List<Tarea> tareas = _tc.getTareasByIdMateria(mat.getIdMateria());
                List<Entrega> entregas = _ec.getEntregasByIdMateria(mat.getIdMateria());
                int cantEst = _mec.getEstudiantesByIdMateria(mat.getIdMateria()).size();
                int acumTar = 0;
                for(Tarea tar : tareas){
                    int acumEnt = 0;
                    for(Entrega ent : entregas){
                        if(tar.getIdTarea() == ent.getIdTarea()){
                            if(ent.getCalificacion()>0) acumEnt += ent.getCalificacion();
                        }
                    }
                    acumTar = cantEst > 0 ? acumEnt / cantEst : 0;
                }
                
                int promMateria = !tareas.isEmpty() ? acumTar / tareas.size() : 0;
                Calificacion cal = new Calificacion(mat, promMateria);
                model.addRow(new Object[]{cal.getMateria().getNombre(), cal.getCalificacion()});
                calificaciones.add(cal);
            }
        }
        
        // Calcular promedio general
        int acum = 0;
        for(Calificacion cal : calificaciones){
            if(cal.getCalificacion()>0) acum += cal.getCalificacion();
        }
        int promGen = !materias.isEmpty() ? acum / materias.size() : 0;
        lblPromedio.setText(""+promGen+"/100");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlEncabezado = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        pnlTabla = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaMain = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        lblPromedio = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(494, 502));
        setMinimumSize(new java.awt.Dimension(494, 502));
        setPreferredSize(new java.awt.Dimension(494, 502));
        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

        pnlEncabezado.setBackground(new java.awt.Color(204, 51, 0));
        pnlEncabezado.setMaximumSize(new java.awt.Dimension(494, 56));
        pnlEncabezado.setMinimumSize(new java.awt.Dimension(494, 56));
        pnlEncabezado.setPreferredSize(new java.awt.Dimension(494, 56));
        pnlEncabezado.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 15));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Calificaciones Generales");
        pnlEncabezado.add(jLabel1);

        add(pnlEncabezado);

        pnlTabla.setBackground(new java.awt.Color(255, 255, 255));
        pnlTabla.setMaximumSize(new java.awt.Dimension(494, 446));
        pnlTabla.setMinimumSize(new java.awt.Dimension(494, 446));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 2, 12)); // NOI18N
        jLabel2.setText("Tip: Haga doble clic en una materia para visualizarla.");

        tablaMain.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Materia", "Promedio"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaMain.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tablaMain.getTableHeader().setReorderingAllowed(false);
        tablaMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tablaMainMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tablaMain);
        if (tablaMain.getColumnModel().getColumnCount() > 0) {
            tablaMain.getColumnModel().getColumn(0).setResizable(false);
            tablaMain.getColumnModel().getColumn(1).setResizable(false);
        }

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Promedio General:");

        lblPromedio.setText("jLabel4");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(lblPromedio)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(lblPromedio))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlTablaLayout = new javax.swing.GroupLayout(pnlTabla);
        pnlTabla.setLayout(pnlTablaLayout);
        pnlTablaLayout.setHorizontalGroup(
            pnlTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTablaLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(pnlTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        pnlTablaLayout.setVerticalGroup(
            pnlTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlTablaLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(32, 32, 32))
        );

        add(pnlTabla);
    }// </editor-fold>//GEN-END:initComponents

    private void tablaMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tablaMainMouseClicked
        if (evt.getClickCount() == 2 && !evt.isConsumed()) {
            evt.consume(); // Evitar m√∫ltiples activaciones

            // Obtener la fila seleccionada
            int selectedRow = tablaMain.getSelectedRow();
            if (selectedRow != -1) {
                // Aqu√≠ puedes usar la lista de respaldo para obtener el objeto completo
                Calificacion calificacionSeleccionada = calificaciones.get(selectedRow);
                Materia matSeleccionada = calificacionSeleccionada.getMateria();                
                parent.forzarPanelMateria(matSeleccionada.getIdMateria());
                
            }
        }
    }//GEN-LAST:event_tablaMainMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPromedio;
    private javax.swing.JPanel pnlEncabezado;
    private javax.swing.JPanel pnlTabla;
    private javax.swing.JTable tablaMain;
    // End of variables declaration//GEN-END:variables
}
